@using BlazorSmack.Components
@page "/"

<h1>Blazor Smack</h1>
<div class="info-container">
    <h2>Score: @score</h2>
    <h2>Time Remaining: @currentTime</h2>
    <h2> @message</h2>
</div>

<div class="board">
    
    @foreach(var s in Squares)
    {
        <Square SquareModel ="s" OnMouseUp="() => MouseUp(s)"/> 
    }
</div>

@code{
    PeriodicTimer gameLoopTimer;
    PeriodicTimer gameTimeTimer;

    private void MouseUp(SquareModel s)
    {
        if (isGameRunning)
        {
            if(s.Id == hitPosition)
            {
                score += 1;
            }
        }
    }
    private Random random = new Random();
    //El signo de pregunta hace que la variable pueda ser nula, sino tira error DATAZO
    int? lastPosition = null;

    private void SetNextAppearance()
    {
        foreach(var item in Squares)
        {
            item.IsShown = false;
        }

        int randomPosition;
        //el ciclo do-while genera una nueva posicion aleatoria(randomPosition) hasta que sea
        //diferente a la ultima posicion (lastPosition), se asegura que la ultima posicion no sea
        //igual que la anterior
        //---------Squares[randomPosition].IsShown = true;
        //Una vez que genera una posicion diferente, esa linea cambia la propiedad isShown en true
        //para el cuadrado en la lista de Squares
        do
        {
            randomPosition = random.Next(0, 9);
        } while (lastPosition == randomPosition);
        Squares[randomPosition].IsShown = true;

        hitPosition = randomPosition;

        lastPosition = randomPosition;
        //es un componente de blazor que notifica al componente que cambio su estado y que tiene 
        //que volver a ser renderizado.
        StateHasChanged();
    }


    //Este metodo contiene el bucle principal del juego que se ejecuta mientras el juego esta en curso
    //En cada iteracion, establece la nueva aparicion de un cuadrado y espera hasta que el temporizador
    //llegue a su proximo tick antes de continuar con la proxima iteracion.
    private async Task GameLoopAsync(PeriodicTimer timer)
    {
        while (isGameRunning)
        {
            SetNextAppearance();
            await timer.WaitForNextTickAsync();
        }
    }

    //Este metodo decrementa el tiempo actual del juego en cada iteracion y verifica si termino
    //Si llega a terminar, establece el fin del juego y  lo detiene, tambien avisa que el estado 
    //del componente cambio.
    private async Task GameTimeAsync(PeriodicTimer timer)
    {
        while (isGameRunning)
        {
            currentTime--;
            if (currentTime ==0)
            {
                message = "Game ended!!!!";
                isGameRunning = false;
            }
            StateHasChanged();
            await timer.WaitForNextTickAsync();
        }
    }
    //La sobrecarga del metodo OnInitialized se usa para inicializar el temporizador del bucle
    //del juego y llamar al metodo GameLoopAsync de manera asincrona
    //--------------

    protected override void OnInitialized()
    {
        //se crea un nuevo temporizador con un intervalo de tiempo especificado por gameSpeed 
        //en milisegundos
        gameLoopTimer = new PeriodicTimer(TimeSpan.FromMilliseconds(gameSpeed));

        //Se llama al metodo GameLoopAsync de manera asincrona pasando el temporizador gameLoopTimer
        //como parametro .
        // El "_" es un descarte por la tarea devuelta por el metodo, lo que significa que no se espera
        //que la tarea se complete para continuar con la ejecucion del codigo 
        _ = GameLoopAsync(gameLoopTimer);

        gameTimeTimer = new PeriodicTimer(TimeSpan.FromSeconds(1));

        _ = GameTimeAsync(gameTimeTimer);
    }
}